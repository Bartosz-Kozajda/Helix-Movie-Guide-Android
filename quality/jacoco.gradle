apply plugin: 'jacoco'

jacoco {
    toolVersion = "$rootProject.ext.quality.jacoco"
}

task codeCoverageReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports..."
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Injector*.*',
                      '**/*App*.class',
                      '**/*Activity.class',
                      '**/*Adapter.class',
                      '**/*Module.*',
                      '**/*Binder.*',
                      '**/*Component*',
                      '**/*Factory.*',
                      '**/TimberL.*',
                      '**/*View*Extensions.*',
                      '**/ContextExtensions.*'
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    classDirectories = files([debugTree], [kotlinDebugTree])

    def coverageSourceDirs = [
            "src/main/java"
    ]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}